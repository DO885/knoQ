openapi: '3.0.2'

info:
  title: traP knoQ
  description: |
    This is a sample knoQ server.
  version: 1.2.0

servers:
  - url: http://knoq.trap.jp/api
    description: Production server
  - url: http://ec2-54-238-146-214.ap-northeast-1.compute.amazonaws.com/api
    description: Development server

tags:
  - name: rooms
    description: traPが借りている講義室
  - name: events
    description: 予約
  - name: groups
    description: グループの情報
  - name: users
    description: ユーザー
  - name: tags
    description: タグ
  - name: activity
    description: activity
  - name: authentication
    description: 認証
  - name: iCal
    description: ics出力

paths:
  /rooms:
    get:
      tags:
        - rooms
      operationId: getRooms
      summary: traPで確保した進捗部屋の情報を取得
      description: traPで確保した進捗部屋の情報を取得
      parameters:
        - name: dateBegin
          in: query
          description: 特定の日から。(iso8601)
          required: false
          schema:
            type: string
            format: datetime
        - name: dateEnd
          in: query
          description: 特定の日まで。(iso8601)
          required: false
          schema:
            type: string
            format: datetime
      responses:
        '200':
          $ref: '#/components/responses/GetRoomArray'
    post:
      tags:
        - rooms
      operationId: addRooms
      summary: traPで確保した部屋の情報追加
      description: 管理者権限が必要
      requestBody:
        $ref: '#/components/requestBodies/Room'
      responses:
        '201':
          $ref: '#/components/responses/PostRoom'
        '400':
          description: Bad Request
        '403':
          description: Forbidden

  /rooms/{roomID}:
    get:
      tags:
        - rooms
      operationId: getRoom
      summary: 一件取得する
      description: 一件取得する
      parameters:
        - name: roomID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/GetRoom'
    delete:
      tags:
        - rooms
      summary: traPで確保した部屋の情報を削除
      description: 管理者権限が必要
        (関連する予約を削除する)
        エラーを出して削除を促す予定
      operationId: deleterooms
      parameters:
        - name: roomID
          in: path
          description: 削除する部屋のID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
        '403':
          description: Forbidden
        '400':
          description: Bad Request
  /rooms/private:
    post:
      tags:
        - rooms
      summary: 各自の部屋の情報追加
      description: 各自の部屋の情報追加
      operationId: addPrivateRoom
      requestBody:
        $ref: '#/components/requestBodies/Room'
      responses:
        '201':
          $ref: '#/components/responses/PostRoom'
        '400':
          description: Bad Request
  /rooms/private/{roomID}:
    delete:
      tags:
        - rooms
      operationId: deletePrivateRoom
      summary: 各自の部屋の情報削除 作成者のみ
      description: 各自の部屋の情報削除 作成者のみ
      parameters:
        - name: roomID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
        '403':
          description: Forbidden
        '400':
          description: Bad Request

  /rooms/all:
    post:
      tags:
        - rooms
      summary: traPで確保した部屋の情報追加
      description: 管理者権限が必要。
        Googleカレンダーから今日から100件取得する
      operationId: addAllrooms
      responses:
        '201':
          $ref: '#/components/responses/PostRoomArray'
        '403':
          description: Forbidden

  /events:
    get:
      tags:
        - events
      summary: 使用宣言の情報を取得
      description: 使用宣言の情報を取得
      operationId: getevents
      parameters:
        - name: dateBegin
          in: query
          description: 特定の日からのみにする。(iso8601)<br>qが優先される
          required: false
          schema:
            type: string
            format: datetime
        - name: dateEnd
          in: query
          description: 特定の日までのみにする。(iso8601)<br>qが優先される
          required: false
          schema:
            type: string
            format: datetime
        - $ref: '#/components/parameters/eventFilter'
      responses:
        '200':
          $ref: '#/components/responses/eventArray'
    post:
      tags:
        - events
      summary: 部屋の使用宣言を行う
      description: 部屋の使用宣言を行う
      operationId: addevents
      requestBody:
        $ref: '#/components/requestBodies/PostEvent'
      responses:
        '201':
          $ref: '#/components/responses/event'
        '403':
          description: Forbidden
        '400':
          description: Bad Request
  /events/{eventID}:
    get:
      tags:
        - events
      summary: 一件取得
      description: 一件取得
      operationId: getevent
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/event'
    put:
      tags:
        - events
      summary: 部屋の使用宣言を更新
      description: adminsのみ
      operationId: updateevents
      parameters:
        - name: eventID
          in: path
          description: 変更する情報のID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/PutEvent'
      responses:
        '200':
          $ref: '#/components/responses/event'
        '403':
          description: Forbidden
        '400':
          description: Bad Request
    delete:
      tags:
        - events
      summary: 使用宣言を削除
      description: adminsのみ
      operationId: deleteRevents
      parameters:
        - name: eventID
          in: path
          description: 削除する情報のID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/Nocontent'
        '403':
          description: Forbidden
        '404':
          description: Not Found

  /events/{eventID}/tags:
    post:
      tags:
        - events
      operationId: addEventTag
      summary: タグを追加
      description: タグを追加
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/tagName'
      responses:
        '204':
          $ref: '#/components/responses/Nocontent'
  /events/{eventID}/tags/{tagName}:
    delete:
      tags:
        - events
      operationId: deleteEventTag
      summary: タグを削除
      description: locked=falseだけ
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tagName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/Nocontent'

  /users/me/events:
    get:
      tags:
        - events
      operationId: getMyEvents
      description: 所属しているイベントを返す
      responses:
        '200':
          $ref: '#/components/responses/eventArray'
  /users/{userID}/events:
    get:
      tags:
        - events
      operationId: getUserEvents
      description: 所属しているイベントを返す
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/eventArray'

  /rooms/{roomID}/events:
    get:
      tags:
        - events
      operationId: getEventsOfRoom
      description: 指定した部屋で行われるイベントを返す
      parameters:
        - name: roomID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/eventArray'
  /groups/{groupID}/events:
    get:
      tags:
        - events
      operationId: getEventsOfGroup
      description: groupIdのeventsを取得
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/eventArray'

  /groups:
    get:
      tags:
        - groups
      summary: グループを全て取得
      description: ログインユーザーなら所属していなくても取得可能にしておく
      operationId: getGroup
      responses:
        '200':
          $ref: '#/components/responses/groupArray'
        '400':
          description: Bad Request
    post:
      tags:
        - groups
      summary: Create group
      description: Create group
      operationId: createGroup
      requestBody:
        $ref: '#/components/requestBodies/group'
      responses:
        '201':
          $ref: '#/components/responses/group'
        '400':
          description: Bad Request

  /groups/{groupID}:
    get:
      tags:
        - groups
      summary: 一件取得
      description: 一件取得
      operationId: getgroup
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/group'
    put:
      tags:
        - groups
      description: adminsのみ変更可能
      operationId: updateGroup
      parameters:
        - name: groupID
          in: path
          description: 変更する情報のID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/group'
      responses:
        '200':
          $ref: '#/components/responses/group'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
    delete:
      tags:
        - groups
      summary: Delete group
      description:
        管理者権限が必要(削除せずとも放置すれば問題無いということにしておく)
        削除されたgroupの予約
      operationId: deleteGroup
      parameters:
        - name: groupID
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
        '403':
          description: Forbidden
        '404':
          description: Groupid not found

  /groups/{groupID}/members/me:
    put:
      tags:
        - groups
      operationId: addMeToGroup
      summary: 自分を追加。open=true
      description: Headerを見て、メンバーを追加する
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/group'
    delete:
      tags:
        - groups
      operationId: deleteMeFromGroup
      summary: 自分しか削除出来ない。open=true
      description: 自分しか削除出来ない。open=true
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/group'

  /users/me/groups:
    get:
      tags:
        - groups
      operationId: getMyGroups
      description: 自分の所属しているグループのIDを返す
      responses:
        '200':
          $ref: '#/components/responses/UUIDArray'
  /users/{userID}/groups:
    get:
      tags:
        - groups
      operationId: getUserGroups
      description: ユーザーが所属しているグループのIDを返す
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/UUIDArray'

  /users:
    get:
      tags:
        - users
      operationId: getUsers
      description: ユーザー一覧を返す
      responses:
        '200':
          $ref: '#/components/responses/userArray'
  /users/sync:
    post:
      tags:
        - users
      operationId: syncUsers
      description: 管理者権限が必要。
        traQのuserと同期します。
        state=1については、ユーザーを作成。
        state=0については、存在している場合に限り、`token`を無効化します。(ユーザー削除はしません)
      responses:
        '201':
          description: OK

  /users/me:
    get:
      tags:
        - users
      operationId: getMe
      summary: クライアントの権限を取得
      description: クライアントを識別するために最初に呼ばれる
      responses:
        '200':
          $ref: '#/components/responses/user'
  /users/me/ical:
    get:
      tags:
        - users
        - iCal
      operationId: getIcalSecret
      description: /ical で使う`secret`を取得
      responses:
        '200':
          description: /ical で使う`secret`を取得
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
    put:
      tags:
        - users
        - iCal
      operationId: resetIcalSecret
      description: /ical で使う`secret`を再生成
      responses:
        '200':
          description: 新たに生成したものを返す
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string

  /tags:
    get:
      tags:
        - tags
      summary: タグを全て取得
      description: タグを全て取得
      operationId: getTag
      responses:
        '200':
          $ref: '#/components/responses/tagArray'
        '400':
          description: Bad Request
    post:
      tags:
        - tags
      summary: タグを作成。
      description: すでにある場合は、error
      operationId: postTag
      requestBody:
        $ref: '#/components/requestBodies/tagName'
      responses:
        '201':
          $ref: '#/components/responses/tag'

  /activity/events:
    get:
      deprecated: true
      tags:
        - activity
        - events
      operationId: getEventActivities
      description: |
        最近7日間に作成変更削除があったイベントを取得。
        削除されたものを含んで返す。
      responses:
        '200':
          $ref: '#/components/responses/eventArray'

  /authParams:
    post:
      tags:
        - authentication
      operationId: getAuthParams
      description: リクエストに必要な情報を返す
      responses:
        '201':
          description: リクエストに必要な情報を返す
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authParams'

  /ical/v1/{icalToken}:
    get:
      tags:
        - iCal
      operationId: getIcal
      description: Icalを取得
      parameters:
        - name: icalToken
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/icalToken'
        - $ref: '#/components/parameters/eventFilter'
      responses:
        '200':
          description: |
            iCal形式でイベントを出力
            外部カレンダーを想定
          content:
            text/calendar:
              schema:
                type: string
              example: "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:github.com/lestrrat-go/ical\nBEGIN:VTIMEZONE\nTZID:Asia/Tokyo\nBEGIN:STANDARD\nDTSTART:19700101T000000\nTZNAME:JST\nTZOFFSETFROM:+9000\nTZOFFSETTO:+9000\nEND:STANDARD\nEND:VTIMEZONE\nBEGIN:VEVENT\nCREATED:20'200'827T09'400'8Z\nDESCRIPTION:asd¥n-----------------------------------¥nイベント詳細ページ¥nhttp://loc\nalhost:'400'0/events/855cff6d-aef6-4de2-8ba5-bc0c3e76a617\nDTEND:20'200'828T1'400'00Z\nDTSTAMP:20'200'904T145144Z\nDTSTART:20'200'828T050000Z\nLAST-MODIFIED:20'200'827T09'400'8Z\nLOCATION:dfaaa\nORGANIZER:18984a38-4dc7-41ab-9c8d-f5469a8e30a9\nSUMMARY:sadfwe\nUID:855cff6d-aef6-4de2-8ba5-bc0c3e76a617\nEND:VEVENT\nBEGIN:VEVENT\nCREATED:20'200'827T09'400'8Z\nDESCRIPTION:asd¥n-----------------------------------¥nイベント詳細ページ¥nhttp://loc\nalhost:'400'0/events/855cff6d-aef6-4de2-8ba5-bc0c3e76a617\nDTEND:20'200'828T1'400'00Z\nDTSTAMP:20'200'904T145144Z\nDTSTART:20'200'828T050000Z\nLAST-MODIFIED:20'200'827T09'400'8Z\nLOCATION:dfaaa\nORGANIZER:18984a38-4dc7-41ab-9c8d-f5469a8e30a9\nSUMMARY:sadfwe\nUID:855cff6d-aef6-4de2-8ba5-bc0c3e76a617\nEND:VEVENT\nEND:VCALENDAR"

components:
  schemas:
    # will delete
    UUIDs:
      type: array
      description: UUIDの配列
      items:
        type: string
        format: uuid

    User:
      type: object
      properties:
        id: &uuid
          type: string
          format: uuid
        name: &userName
          type: string
          example: fuji
        displayName: &displayName
          type: string
          example: ふじ
        privileged: &privileged
          type: boolean

    Room:
      type: object
      properties:
        roomId: *uuid
        place: &place
          type: string
          example: S516
        timeStart: &time
          type: string
          example: '2006-01-02T15:04Z'
        timeEnd: *time
        createdBy: *uuid
        createdAt: *time
        updatedAt: *time

    Group:
      type: object
      properties:
        groupId: *uuid
        name: &groupName
          type: string
          example: room
        description: &groupDescription
          type: string
          example: Sysad班room開発グループ
        open: &open
          type: boolean
        members: &members
          $ref: '#/components/schemas/UUIDs'
        admins: &admins
          $ref: '#/components/schemas/UUIDs'
        createdBy: *uuid
        createdAt: *time
        updatedAt: *time
    Tag:
      type: object
      properties: &tag
        tagId: *uuid
        name: &tagName
          type: string
          example: Vue
        createdAt: *time
        updatedAt: *time

    event:
      type: object
      properties:
        eventId: *uuid
        name: &eventName
          type: string
          example: 第n回進捗回
        descirption: &eventDescription
          type: string
          example: 第n回の進捗会です。
        sharedRoom: &sharedRoom
          type: boolean
          description: 部屋の共用をするか
        timeStart: *time
        timeEnd: *time
        roomId: *uuid
        groupId: *uuid
        admins: *admins
        tags:
          type: array
          items:
            type: object
            description: タグの配列
            properties:
              tagId: *uuid
              name: *tagName
              locked: &locked
                type: boolean
        createdBy: *uuid
        createdAt: *time
        updatedAt: *time

    authParams:
      type: object
      properties:
        clientId:
          type: string
        state:
          type: string
        codeChallenge:
          type: string

    icalToken:
      type: string
      description: userIdとicalのsecretをつなげたもの

  requestBodies:
    Group:
      description: グループの追加
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: *groupName
              description: *groupDescription
              open: *open
              members: *members
              admins: *admins

    Room:
      description: 部屋の追加
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              place: *place
              timeStart: *time
              timeEnd: *time

    Event:
      description: 予約の編集
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                description: 部屋を作る
                properties:
                  name: *eventName
                  descirption: *eventDescription
                  sharedRoom: *sharedRoom
                  timeStart: *time
                  timeEnd: *time
                  place: *place
                  groupId: *uuid
                  admins: *admins
                  tags: &reqEventTags
                    type: array
                    items:
                      type: object
                      properties:
                        name: *tagName
                        locked: *locked
              - type: object
                description: 既存の部屋を使う
                properties:
                  name: *eventName
                  descirption: *eventDescription
                  sharedRoom: *sharedRoom
                  timeStart: *time
                  timeEnd: *time
                  roomId: *uuid
                  groupId: *uuid
                  admins: *admins
                  tags: *reqEventTags

  responses:
    Nocontent:
      description: Nocontent

    UUIDArray:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UUIDs'

    Room:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
    RoomArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Room'
    Event:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
    EventArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Event'
    Group:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    GroupArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
    User:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

    Tag:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
    TagArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Tag'

  parameters:
    eventFilter:
      name: q
      in: query
      schema:
        type: string
      description: 'Syntax: <br>
        top  : ε | expr,
        expr : term ( ( "||" | "&&" ) term)*<br>
        term : cmp | "(" expr ")"<br>
        cmp  : Attr ( "==" | "!=" ) UUID<br>
        Attr : "event" | "user" | "group" | "tag"
        '

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
