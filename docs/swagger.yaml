openapi: "3.0.2"

info:
  title: traP Room
  description: |
    This is a sample Room server.
  version: 1.0.0

servers:
  - url: http://develop.room.sysad.trap.show/api/
    description: Development server

tags:
  - name: rooms
    description: traPが借りている講義室
  - name: reservations
    description: 予約
  - name: groups
    description: グループの情報
  - name: users
    description: ユーザー
  - name: tags
    description: タグ

paths:
  /rooms:
    post:
      tags:
        - rooms
      summary: traPで確保した部屋の情報追加 (使わない)
      description: 管理者権限が必要
      operationId: addrooms
      requestBody:
        description: 確保した部屋の情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                place:
                  type: string
                  example: S516
                date:
                  type: string
                  example: "2019-08-08"
                time_start:
                  type: string
                  example: "17:30"
                time_end:
                  type: string
                  example: "20:00"
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/ReqTag"
      responses:
        201:
          $ref: "#/components/responses/room"
        400:
          description: Bad Request
        403:
          description: Forbidden

    get:
      tags:
        - rooms
      summary: traPで確保した進捗部屋の情報を取得
      operationId: getrooms
      parameters:
        - name: id
          in: query
          description: roomID
          required: false
          schema:
            type: integer
            format: int64
        - name: date_begin
          in: query
          description: 特定の日から。(2017-07-21とか)
          required: false
          schema:
            type: string
            format: date
            example: "2017-07-21"
        - name: date_end
          in: query
          description: 特定の日まで。(2017-07-21とか)
          required: false
          schema:
            type: string
            format: date
            example: "2017-07-21"
      responses:
        200:
          $ref: "#/components/responses/roomArray"
  /rooms/{roomID}:
    delete:
      tags:
        - rooms
      summary: traPで確保した部屋の情報を削除
      description: 管理者権限が必要
        (関連する予約を削除する)
        エラーを出して削除を促す予定
      operationId: deleterooms
      parameters:
        - name: roomID
          in: path
          description: 削除する部屋のID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        403:
          description: Forbidden
        400:
          description: Bad Request
  /rooms/all:
    post:
      tags:
        - rooms
      summary: traPで確保した部屋の情報追加
      description: 管理者権限が必要。
        Googleカレンダーから今日から100件取得する
      operationId: addAllrooms
      responses:
        201:
          $ref: "#/components/responses/roomArray"
        403:
          description: Forbidden

  /reservations:
    get:
      tags:
        - reservations
      summary: 使用宣言の情報を取得
      operationId: getreservations
      parameters:
        - name: id
          in: query
          description: idで検索
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: 名前で検索
          required: false
          schema:
            type: string
        - name: traQID
          in: query
          description: 特定のuserが所属するグループのみにする。
          required: false
          schema:
            type: integer
            format: int64
        - name: groupID
          in: query
          description: 特定のグループのみにする。
          required: false
          schema:
            type: integer
            format: int64
        - name: roomID
          in: query
          description: 特定の部屋のみにする。
          required: false
          schema:
            type: integer
            format: int64
        - name: date_begin
          in: query
          description: 特定の日からのみにする。(2017-07-21とか)
          required: false
          schema:
            type: string
            format: date
        - name: date_end
          in: query
          description: 特定の日までのみにする。(2017-07-21とか)
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          $ref: "#/components/responses/reservationArray"
    post:
      tags:
        - reservations
      summary: 部屋の使用宣言を行う
      operationId: addreservations
      requestBody:
        $ref: "#/components/requestBodies/PostReservation"
      responses:
        201:
          $ref: "#/components/responses/reservation"
        403:
          description: Forbidden
        400:
          description: Bad Request
  /reservations/{reservationID}:
    patch:
      tags:
        - reservations
      summary: 部屋の使用宣言を更新(現状はroomid, timestart, timeendのみを変更)
      description: 作成者のみ
      operationId: updatereservations
      parameters:
        - name: reservationID
          in: path
          description: 変更する情報のID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PatchReservation"
      responses:
        200:
          $ref: "#/components/responses/reservation"
        403:
          description: Forbidden
        400:
          description: Bad Request
    delete:
      tags:
        - reservations
      summary: 使用宣言を削除
      description: 作成者のみ
      operationId: deleteRreservations
      parameters:
        - name: reservationID
          in: path
          description: 削除する情報のID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        403:
          description: Forbidden
        404:
          description: Not Found
  /groups:
    get:
      tags:
        - groups
      summary: グループを全て取得
      description: ログインユーザーなら所属していなくても取得可能にしておく
      operationId: getGroup
      parameters:
        - name: id
          in: query
          description: idで取得
          required: false
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: nameで取得
          required: false
          schema:
            type: string
        - name: traQID
          in: query
          description: 特定のuserが所属するグループのみにする。(IDにするか名前にするかは検討)
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/groupArray"
        400:
          description: Bad Request
    post:
      tags:
        - groups
      summary: Create group
      operationId: createGroup
      requestBody:
        $ref: "#/components/requestBodies/group"
      responses:
        201:
          $ref: "#/components/responses/group"
        400:
          description: Bad Request
  /groups/{groupID}:
    patch:
      tags:
        - groups
      summary: グループメンバー、グループ名、詳細を更新
      description: 作成者のみ変更可能
      operationId: updateGroup
      parameters:
        - name: groupID
          in: path
          description: 変更する情報のID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/group"
      responses:
        200:
          $ref: "#/components/responses/group"
        400:
          description: Bad Request
        403:
          description: Forbidden
    delete:
      tags:
        - groups
      summary: Delete group
      description:
        管理者権限が必要(削除せずとも放置すれば問題無いということにしておく)
        削除されたgroupの予約
      operationId: deleteGroup
      parameters:
        - name: groupID
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        403:
          description: Forbidden
        404:
          description: Groupid not found
  /users:
    get:
      tags:
        - users
      summary: すべてのユーザーを取得
      description: ユーザーを全取得する（traQのAPIを使うなら消す）
      responses:
        200:
          $ref: "#/components/responses/userArray"
  /users/me:
    get:
      tags:
        - users
      summary: クライアントのtraQIDを取得
      description: クライアントを識別するために最初に呼ばれる
      responses:
        200:
          $ref: "#/components/responses/user"
  /tags:
    get:
      tags:
        - tags
      summary: タグを全て取得
      description: queryで切り分ける
      operationId: getTag
      parameters:
        - name: for_room
          in: query
          required: false
          schema:
            type: boolean
        - name: for_group
          in: query
          required: false
          schema:
            type: boolean
        - name: for_reservation
          in: query
          required: false
          schema:
            type: boolean
      responses:
        200:
          $ref: "#/components/responses/tagArray"
        400:
          description: Bad Request
  /tags/{type}:
    post:
      tags:
        - tags
      summary: タグを作成。
      description: すでにある場合は、for_group=trueなどにする。
      operationId: postTag
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - room
              - group
              - reservation
      requestBody:
        $ref: "#/components/requestBodies/tag"
      responses:
        201:
          $ref: "#/components/responses/tag"

components:
  schemas:
    room:
      type: object
      required:
        - place
        - date
      properties:
        id:
          type: integer
          format: int64
          example: 1
        place:
          type: string
          example: S516
        date:
          type: string
          format: date
          example: "2019-08-08"
        time_start:
          type: string
          format: time
          example: "17:30:00"
        time_end:
          type: string
          format: time
          example: "20:00:00"
        created_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"
        updated_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"
    ResponseRoom:
      allOf:
        - $ref: "#/components/schemas/room"
        - type: object
          properties:
            tags:
              type: array
              items:
                $ref: "#/components/schemas/ResponseTag"

    reservation:
      type: object
      properties:
        name:
          type: string
          example: 第n回進捗回
        descirption:
          type: string
          example: 第n回の進捗会です。
        time_start:
          type: string
          example: "18:00"
        time_end:
          type: string
          example: "20:00"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ReqTag"
    PatchReservation:
      allOf:
        - $ref: "#/components/schemas/reservation"
      properties:
        room_id:
          type: integer
          example: 1
    PostReservation:
      allOf:
        - $ref: "#/components/schemas/PatchReservation"
      properties:
        group_id:
          type: integer
          example: 3
    ResponseReservation:
      allOf:
        - $ref: "#/components/schemas/reservation"
        - type: object
          properties:
            group:
              $ref: "#/components/schemas/ResponseGroup"
        - type: object
          properties:
            room:
              $ref: "#/components/schemas/room"
        - type: object
          properties:
            tags:
              type: array
              items:
                $ref: "#/components/schemas/ResponseTag"
      properties:
        created_by:
          type: string
          example: "fuji"
        created_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"
        updated_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"
    
    RequestGroup:
      type: object
      properties:
        name:
          type: string
          example: room
        description:
          type: string
          example: Sysad班room開発グループ
        members:
          type: array
          items:
            $ref: "#/components/schemas/ResUser"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ReqTag"
    ResponseGroup:
      allOf:
        - $ref: "#/components/schemas/RequestGroup"
      properties:
        id:
          type: integer
          format: int64
          example: 3
        created_by:
          type: string
          example: "fuji"
        created_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"
        updated_at:
          type: string
          example: "2019-11-02T15:24:42.5438806Z"

    user:
      allOf:
        - $ref: "#/components/schemas/ResUser"
      properties:
        admin:
          type: boolean
          example: true
    ResUser:
      type: object
      properties:
        traq_id:
          type: string
          example: fuji

    tag:
      allOf:
        - $ref: "#/components/schemas/ResTag"
      properties:
        for_room:
          type: boolean
          example: false
        for_group:
          type: boolean
          example: true
        for_reservation:
          type: boolean
          example: true
    ReqTag:
      type: object
      properties:
        name:
          type: string
          example: Vue
        locked:
          type: boolean
          example: true
    ResTag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Vue
        official:
          type: boolean
          example: true
    ResponseTag:
      allOf:
        - $ref: "#/components/schemas/ResTag"
      properties:
        locked:
          type: boolean
          example: true

  requestBodies:
    PatchReservation:
      description: 予約の編集
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PatchReservation"
    PostReservation:
      description: 予約の追加
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostReservation"
    group:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RequestGroup"

    tag:
      description: タグ本体の作成。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReqTag"

  responses:
    room:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseRoom"
    roomArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResponseRoom"
    reservation:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseReservation"
    reservationArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResponseReservation"
    group:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseGroup"
    groupArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResponseGroup"
    user:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"
    userArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResUser"
    tag:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/tag"
    tagArray:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/tag"

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
