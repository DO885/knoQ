// Code generated by gotypeconverter; DO NOT EDIT.
package presentation

import (
	"github.com/gofrs/uuid"
	"github.com/traPtitech/knoQ/domain"
)

func ConvEventReqWriteTodomainWriteEventParams(src EventReqWrite) (dst domain.WriteEventParams) {
	dst.Name = src.Name
	dst.Description = src.Description
	dst.GroupID = src.GroupID
	dst.RoomID = src.RoomID
	dst.Place = src.Place
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.Admins = src.Admins
	dst.AllowTogether = src.AllowTogether
	dst.Tags = make([]domain.EventTagParams, len(src.Tags))
	for i := range src.Tags {
		dst.Tags[i] = domain.EventTagParams(src.Tags[i])
	}
	return
}

func ConvGroupReqTodomainWriteGroupParams(src GroupReq) (dst domain.WriteGroupParams) {
	dst = domain.WriteGroupParams(src)
	return
}

func ConvRoomReqTodomainWriteRoomParams(src RoomReq) (dst domain.WriteRoomParams) {
	dst = domain.WriteRoomParams(src)
	return
}
func ConvSPdomainEventToSEventRes(src []*domain.Event) (dst []EventRes) {
	dst = make([]EventRes, len(src))
	for i := range src {
		dst[i].ID = (*src[i]).ID
		dst[i].Name = (*src[i]).Name
		dst[i].Description = (*src[i]).Description
		dst[i].AllowTogether = (*src[i]).AllowTogether
		dst[i].TimeStart = (*src[i]).TimeStart
		dst[i].TimeEnd = (*src[i]).TimeEnd
		dst[i].RoomID = ConvdomainRoomTouuidUUID((*src[i]).Room)
		dst[i].GroupID = ConvdomainGroupTouuidUUID((*src[i]).Group)
		dst[i].Place = (*src[i]).Room.Place
		dst[i].GroupName = (*src[i]).Group.Name
		dst[i].Admins = make([]uuid.UUID, len((*src[i]).Admins))
		for j := range (*src[i]).Admins {
			dst[i].Admins[j] = ConvdomainUserTouuidUUID((*src[i]).Admins[j])
		}
		dst[i].Tags = (*src[i]).Tags
		dst[i].CreatedBy = ConvdomainUserTouuidUUID((*src[i]).CreatedBy)
		dst[i].Model = Model((*src[i]).Model)
	}
	return
}

func ConvSPdomainGroupToSPGroupRes(src []*domain.Group) (dst []*GroupRes) {
	dst = make([]*GroupRes, len(src))
	for i := range src {
		dst[i] = new(GroupRes)
		(*dst[i]) = ConvdomainGroupToGroupRes((*src[i]))
	}
	return
}

func ConvSPdomainRoomToSPRoomRes(src []*domain.Room) (dst []*RoomRes) {
	dst = make([]*RoomRes, len(src))
	for i := range src {
		dst[i] = new(RoomRes)
		(*dst[i]) = ConvdomainRoomToRoomRes((*src[i]))
	}
	return
}

func ConvSPdomainTagToSPTagRes(src []*domain.Tag) (dst []*TagRes) {
	dst = make([]*TagRes, len(src))
	for i := range src {
		dst[i] = new(TagRes)
		(*dst[i]) = ConvdomainTagToTagRes((*src[i]))
	}
	return
}

func ConvSPdomainUserToSPUserRes(src []*domain.User) (dst []*UserRes) {
	dst = make([]*UserRes, len(src))
	for i := range src {
		dst[i] = new(UserRes)
		(*dst[i]) = ConvdomainUserToUserRes((*src[i]))
	}
	return
}
func ConvSPdomainUserToSUserRes(src []*domain.User) (dst []UserRes) {
	dst = make([]UserRes, len(src))
	for i := range src {
		dst[i] = UserRes((*src[i]))
	}
	return
}

func ConvdomainEventTagToEventTagRes(src domain.EventTag) (dst EventTagRes) {
	dst.ID = ConvdomainTagTouuidUUID(src.Tag)
	dst.Name = src.Tag.Name
	dst.Locked = src.Locked
	return
}
func ConvdomainEventToEventDetailRes(src domain.Event) (dst EventDetailRes) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	dst.Room = ConvdomainRoomToRoomRes(src.Room)
	dst.Group = ConvdomainGroupToGroupRes(src.Group)
	dst.Place = src.Room.Place
	dst.GroupName = src.Group.Name
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.CreatedBy = ConvdomainUserTouuidUUID(src.CreatedBy)
	dst.Admins = make([]uuid.UUID, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvdomainUserTouuidUUID(src.Admins[i])
	}
	dst.Tags = make([]EventTagRes, len(src.Tags))
	for i := range src.Tags {
		dst.Tags[i] = ConvdomainEventTagToEventTagRes(src.Tags[i])
	}
	dst.AllowTogether = src.AllowTogether
	dst.Model = Model(src.Model)
	return
}

func ConvdomainEventToEventRes(src domain.Event) (dst EventRes) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	dst.AllowTogether = src.AllowTogether
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.RoomID = ConvdomainRoomTouuidUUID(src.Room)
	dst.GroupID = ConvdomainGroupTouuidUUID(src.Group)
	dst.Place = src.Room.Place
	dst.GroupName = src.Group.Name
	dst.Admins = make([]uuid.UUID, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvdomainUserTouuidUUID(src.Admins[i])
	}
	dst.Tags = src.Tags
	dst.CreatedBy = ConvdomainUserTouuidUUID(src.CreatedBy)
	dst.Model = Model(src.Model)
	return
}

func ConvdomainGroupToGroupRes(src domain.Group) (dst GroupRes) {
	dst.ID = src.ID
	dst.GroupReq.Name = src.Name
	dst.GroupReq.Description = src.Description
	dst.GroupReq.JoinFreely = src.JoinFreely
	dst.GroupReq.Members = make([]uuid.UUID, len(src.Members))
	for i := range src.Members {
		dst.GroupReq.Members[i] = ConvdomainUserTouuidUUID(src.Members[i])
	}
	dst.GroupReq.Admins = make([]uuid.UUID, len(src.Admins))
	for i := range src.Admins {
		dst.GroupReq.Admins[i] = ConvdomainUserTouuidUUID(src.Admins[i])
	}
	dst.CreatedBy = ConvdomainUserTouuidUUID(src.CreatedBy)
	dst.Model = Model(src.Model)
	return
}
func ConvdomainGroupTouuidUUID(src domain.Group) (dst uuid.UUID) {
	dst = src.ID
	return
}

func ConvdomainRoomToRoomRes(src domain.Room) (dst RoomRes) {
	dst.ID = src.ID
	dst.Verified = src.Verified
	dst.RoomReq.Place = src.Place
	dst.RoomReq.TimeStart = src.TimeStart
	dst.RoomReq.TimeEnd = src.TimeEnd
	dst.RoomReq.Admins = make([]uuid.UUID, len(src.Admins))
	for i := range src.Admins {
		dst.RoomReq.Admins[i] = ConvdomainUserTouuidUUID(src.Admins[i])
	}
	dst.CreatedBy = ConvdomainUserTouuidUUID(src.CreatedBy)
	dst.Model = Model(src.Model)
	return
}
func ConvdomainRoomTouuidUUID(src domain.Room) (dst uuid.UUID) {
	dst = src.ID
	return
}

func ConvdomainTagToTagRes(src domain.Tag) (dst TagRes) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Model = Model(src.Model)
	return
}
func ConvdomainTagTouuidUUID(src domain.Tag) (dst uuid.UUID) {
	dst = src.ID
	return
}

func ConvdomainUserToUserRes(src domain.User) (dst UserRes) {
	dst = UserRes(src)
	return
}
func ConvdomainUserTouuidUUID(src domain.User) (dst uuid.UUID) {
	dst = src.ID
	return
}
